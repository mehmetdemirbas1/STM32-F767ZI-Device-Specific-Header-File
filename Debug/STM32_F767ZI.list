
STM32_F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000940  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000b38  08000b38  00001b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b48  08000b48  00001b58  2**0
                  CONTENTS
  4 .ARM          00000008  08000b48  08000b48  00001b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b50  08000b58  00001b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b50  08000b50  00001b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b54  08000b54  00001b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000000  08000b58  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08000b58  00002058  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001535  00000000  00000000  00001b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000064e  00000000  00000000  000030b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00003708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000100  00000000  00000000  00003878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ac2  00000000  00000000  00003978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001efd  00000000  00000000  0000643a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c4b3  00000000  00000000  00008337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000147ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c8  00000000  00000000  00014830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00014cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000b20 	.word	0x08000b20

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000b20 	.word	0x08000b20

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <EXTI_Init>:
 * @oaram	EXTI_InitStruct = User config structure
 *
 * @retreval None
 */
void EXTI_Init(EXTI_InitTypeDef_t *EXTI_InitStruct)
{
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
	tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000254:	4b43      	ldr	r3, [pc, #268]	@ (8000364 <EXTI_Init+0x11c>)
 8000256:	60fb      	str	r3, [r7, #12]

	EXTI->IMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000258:	4b42      	ldr	r3, [pc, #264]	@ (8000364 <EXTI_Init+0x11c>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	2301      	movs	r3, #1
 8000264:	408b      	lsls	r3, r1
 8000266:	43db      	mvns	r3, r3
 8000268:	493e      	ldr	r1, [pc, #248]	@ (8000364 <EXTI_Init+0x11c>)
 800026a:	4013      	ands	r3, r2
 800026c:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800026e:	4b3d      	ldr	r3, [pc, #244]	@ (8000364 <EXTI_Init+0x11c>)
 8000270:	685a      	ldr	r2, [r3, #4]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	4619      	mov	r1, r3
 8000278:	2301      	movs	r3, #1
 800027a:	408b      	lsls	r3, r1
 800027c:	43db      	mvns	r3, r3
 800027e:	4939      	ldr	r1, [pc, #228]	@ (8000364 <EXTI_Init+0x11c>)
 8000280:	4013      	ands	r3, r2
 8000282:	604b      	str	r3, [r1, #4]

	if(EXTI_InitStruct->EXTI_LineCmd !=DISABLE)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	78db      	ldrb	r3, [r3, #3]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d053      	beq.n	8000334 <EXTI_Init+0xec>
	{
		tempValue += EXTI_InitStruct->Mode;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	789b      	ldrb	r3, [r3, #2]
 8000290:	461a      	mov	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	4413      	add	r3, r2
 8000296:	60fb      	str	r3, [r7, #12]
		*((volatile uint32_t*)tempValue) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	6819      	ldr	r1, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	461a      	mov	r2, r3
 80002a2:	2301      	movs	r3, #1
 80002a4:	fa03 f202 	lsl.w	r2, r3, r2
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	430a      	orrs	r2, r1
 80002ac:	601a      	str	r2, [r3, #0]

		tempValue = (uint32_t)EXTI_BASE_ADDR;
 80002ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000364 <EXTI_Init+0x11c>)
 80002b0:	60fb      	str	r3, [r7, #12]

		EXTI->RTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80002b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000364 <EXTI_Init+0x11c>)
 80002b4:	689a      	ldr	r2, [r3, #8]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4619      	mov	r1, r3
 80002bc:	2301      	movs	r3, #1
 80002be:	408b      	lsls	r3, r1
 80002c0:	43db      	mvns	r3, r3
 80002c2:	4928      	ldr	r1, [pc, #160]	@ (8000364 <EXTI_Init+0x11c>)
 80002c4:	4013      	ands	r3, r2
 80002c6:	608b      	str	r3, [r1, #8]
		EXTI->FTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80002c8:	4b26      	ldr	r3, [pc, #152]	@ (8000364 <EXTI_Init+0x11c>)
 80002ca:	68da      	ldr	r2, [r3, #12]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	4619      	mov	r1, r3
 80002d2:	2301      	movs	r3, #1
 80002d4:	408b      	lsls	r3, r1
 80002d6:	43db      	mvns	r3, r3
 80002d8:	4922      	ldr	r1, [pc, #136]	@ (8000364 <EXTI_Init+0x11c>)
 80002da:	4013      	ands	r3, r2
 80002dc:	60cb      	str	r3, [r1, #12]

		if(EXTI_InitStruct->TriggerSelection == EXTI_TRIGGER_RF_EDGE)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	2b10      	cmp	r3, #16
 80002e4:	d114      	bne.n	8000310 <EXTI_Init+0xc8>
		{
			EXTI->RTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80002e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000364 <EXTI_Init+0x11c>)
 80002e8:	689a      	ldr	r2, [r3, #8]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	4619      	mov	r1, r3
 80002f0:	2301      	movs	r3, #1
 80002f2:	408b      	lsls	r3, r1
 80002f4:	491b      	ldr	r1, [pc, #108]	@ (8000364 <EXTI_Init+0x11c>)
 80002f6:	4313      	orrs	r3, r2
 80002f8:	608b      	str	r3, [r1, #8]
			EXTI->FTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80002fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000364 <EXTI_Init+0x11c>)
 80002fc:	68da      	ldr	r2, [r3, #12]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	4619      	mov	r1, r3
 8000304:	2301      	movs	r3, #1
 8000306:	408b      	lsls	r3, r1
 8000308:	4916      	ldr	r1, [pc, #88]	@ (8000364 <EXTI_Init+0x11c>)
 800030a:	4313      	orrs	r3, r2
 800030c:	60cb      	str	r3, [r1, #12]
		*((volatile uint32_t*)tempValue) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);

	}


}
 800030e:	e024      	b.n	800035a <EXTI_Init+0x112>
			tempValue += EXTI_InitStruct->TriggerSelection;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	785b      	ldrb	r3, [r3, #1]
 8000314:	461a      	mov	r2, r3
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
			*((volatile uint32_t*)tempValue) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	6819      	ldr	r1, [r3, #0]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	2301      	movs	r3, #1
 8000328:	fa03 f202 	lsl.w	r2, r3, r2
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	430a      	orrs	r2, r1
 8000330:	601a      	str	r2, [r3, #0]
}
 8000332:	e012      	b.n	800035a <EXTI_Init+0x112>
		tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000334:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <EXTI_Init+0x11c>)
 8000336:	60fb      	str	r3, [r7, #12]
		tempValue += EXTI_InitStruct->Mode;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	789b      	ldrb	r3, [r3, #2]
 800033c:	461a      	mov	r2, r3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	4413      	add	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
		*((volatile uint32_t*)tempValue) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	6819      	ldr	r1, [r3, #0]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	2301      	movs	r3, #1
 8000350:	4093      	lsls	r3, r2
 8000352:	43da      	mvns	r2, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	400a      	ands	r2, r1
 8000358:	601a      	str	r2, [r3, #0]
}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40013c00 	.word	0x40013c00

08000368 <EXTI_LineConfig>:
 * @param	EXTI_LineSource = user choose our EXTI Line Sources @def_group Line_Values
 *
 * @retreval None
 */
void EXTI_LineConfig(uint8_t EXTI_PortSource, uint8_t EXTI_LineSource)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	460a      	mov	r2, r1
 8000372:	71fb      	strb	r3, [r7, #7]
 8000374:	4613      	mov	r3, r2
 8000376:	71bb      	strb	r3, [r7, #6]
	uint32_t tempValue = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
    tempValue = SYSCFG->EXTI_CR[EXTI_LineSource >> 2U];
 800037c:	4a14      	ldr	r2, [pc, #80]	@ (80003d0 <EXTI_LineConfig+0x68>)
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	089b      	lsrs	r3, r3, #2
 8000382:	b2db      	uxtb	r3, r3
 8000384:	3302      	adds	r3, #2
 8000386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038a:	60fb      	str	r3, [r7, #12]
    tempValue &= ~(0xF << (EXTI_LineSource & 0x3U)*4);
 800038c:	79bb      	ldrb	r3, [r7, #6]
 800038e:	f003 0303 	and.w	r3, r3, #3
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	220f      	movs	r2, #15
 8000396:	fa02 f303 	lsl.w	r3, r2, r3
 800039a:	43db      	mvns	r3, r3
 800039c:	461a      	mov	r2, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	4013      	ands	r3, r2
 80003a2:	60fb      	str	r3, [r7, #12]
    tempValue = (EXTI_PortSource <<(EXTI_LineSource & 0x3U)*4 );
 80003a4:	79fa      	ldrb	r2, [r7, #7]
 80003a6:	79bb      	ldrb	r3, [r7, #6]
 80003a8:	f003 0303 	and.w	r3, r3, #3
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	fa02 f303 	lsl.w	r3, r2, r3
 80003b2:	60fb      	str	r3, [r7, #12]
    SYSCFG->EXTI_CR[EXTI_LineSource >> 2U] = tempValue;
 80003b4:	4906      	ldr	r1, [pc, #24]	@ (80003d0 <EXTI_LineConfig+0x68>)
 80003b6:	79bb      	ldrb	r3, [r7, #6]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	3302      	adds	r3, #2
 80003be:	68fa      	ldr	r2, [r7, #12]
 80003c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 80003c4:	bf00      	nop
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40013800 	.word	0x40013800

080003d4 <NVIC_EnableInterrupt>:
 * @oaram	IRQNumber = IRQ number of line
 *
 * @retreval None
 */
void NVIC_EnableInterrupt(IRQNumber_TypeDef_t IRQNumber)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	uint32_t tempValue = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]

	tempValue = *((IRQNumber >>5U)+ NVIC_ISER0 );
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	095b      	lsrs	r3, r3, #5
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	009a      	lsls	r2, r3, #2
 80003ea:	4b12      	ldr	r3, [pc, #72]	@ (8000434 <NVIC_EnableInterrupt+0x60>)
 80003ec:	4413      	add	r3, r2
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0x1U << (IRQNumber & 0x1FU));
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f003 031f 	and.w	r3, r3, #31
 80003f8:	2201      	movs	r2, #1
 80003fa:	fa02 f303 	lsl.w	r3, r2, r3
 80003fe:	43db      	mvns	r3, r3
 8000400:	68fa      	ldr	r2, [r7, #12]
 8000402:	4013      	ands	r3, r2
 8000404:	60fb      	str	r3, [r7, #12]
	tempValue |= (0x1U << (IRQNumber & 0x1FU));
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	f003 031f 	and.w	r3, r3, #31
 800040c:	2201      	movs	r2, #1
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	4313      	orrs	r3, r2
 8000416:	60fb      	str	r3, [r7, #12]
	*((IRQNumber >>5U)+ NVIC_ISER0 ) = tempValue;
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	095b      	lsrs	r3, r3, #5
 800041c:	b2db      	uxtb	r3, r3
 800041e:	009a      	lsls	r2, r3, #2
 8000420:	4b04      	ldr	r3, [pc, #16]	@ (8000434 <NVIC_EnableInterrupt+0x60>)
 8000422:	4413      	add	r3, r2
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	601a      	str	r2, [r3, #0]
}
 8000428:	bf00      	nop
 800042a:	3714      	adds	r7, #20
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	e000e100 	.word	0xe000e100

08000438 <GPIO_Init>:
 *
 * @retreval None
 */

void GPIO_Init(GPIO_TypeDef_t *GPIOx, GPIO_InitTypeDef_t *GPIO_ConfigStruct)
{
 8000438:	b480      	push	{r7}
 800043a:	b087      	sub	sp, #28
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]

	uint32_t position;
	uint32_t fakePosition = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
	uint32_t lastPosition = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
	for(position = 0; position <16; position++)
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
 800044e:	e0a1      	b.n	8000594 <GPIO_Init+0x15c>
	{
		fakePosition = (0x1 << position);
 8000450:	2201      	movs	r2, #1
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	fa02 f303 	lsl.w	r3, r2, r3
 8000458:	613b      	str	r3, [r7, #16]
		lastPosition = (uint32_t)(GPIO_ConfigStruct->PinNumbers)&fakePosition;
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	693a      	ldr	r2, [r7, #16]
 8000460:	4013      	ands	r3, r2
 8000462:	60fb      	str	r3, [r7, #12]
		if(fakePosition == lastPosition)
 8000464:	693a      	ldr	r2, [r7, #16]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	429a      	cmp	r2, r3
 800046a:	f040 8090 	bne.w	800058e <GPIO_Init+0x156>
		{
			/* MODE CONFIG */
			uint32_t tempValue=0;
 800046e:	2300      	movs	r3, #0
 8000470:	60bb      	str	r3, [r7, #8]
			tempValue = GPIOx->MODER;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position*2));
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	2203      	movs	r2, #3
 800047e:	fa02 f303 	lsl.w	r3, r2, r3
 8000482:	43db      	mvns	r3, r3
 8000484:	68ba      	ldr	r2, [r7, #8]
 8000486:	4013      	ands	r3, r2
 8000488:	60bb      	str	r3, [r7, #8]
			tempValue |= (GPIO_ConfigStruct->Mode <<(position*2));
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	685a      	ldr	r2, [r3, #4]
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	fa02 f303 	lsl.w	r3, r2, r3
 8000496:	68ba      	ldr	r2, [r7, #8]
 8000498:	4313      	orrs	r3, r2
 800049a:	60bb      	str	r3, [r7, #8]
			GPIOx->MODER = tempValue;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	68ba      	ldr	r2, [r7, #8]
 80004a0:	601a      	str	r2, [r3, #0]
			if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d003      	beq.n	80004b2 <GPIO_Init+0x7a>
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d12d      	bne.n	800050e <GPIO_Init+0xd6>
			{
				/* OTYPE CONFIG */
				tempValue =GPIOx->OTYPER;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x1U << position);
 80004b8:	2201      	movs	r2, #1
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	43db      	mvns	r3, r3
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Otype <<(position));
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	689a      	ldr	r2, [r3, #8]
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	fa02 f303 	lsl.w	r3, r2, r3
 80004d2:	68ba      	ldr	r2, [r7, #8]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = tempValue;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68ba      	ldr	r2, [r7, #8]
 80004dc:	605a      	str	r2, [r3, #4]

				/* OSPEED CONFIG */
				tempValue = GPIOx->OSPEEDR;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x3U << (position*2));
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	2203      	movs	r2, #3
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	43db      	mvns	r3, r3
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Speed <<(position*2));
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	691a      	ldr	r2, [r3, #16]
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	4313      	orrs	r3, r2
 8000506:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR = tempValue;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	609a      	str	r2, [r3, #8]
			}
			/* PUPDR CONFIG */
			tempValue = GPIOx->PUPDR;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position*2));
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	2203      	movs	r2, #3
 800051a:	fa02 f303 	lsl.w	r3, r2, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	68ba      	ldr	r2, [r7, #8]
 8000522:	4013      	ands	r3, r2
 8000524:	60bb      	str	r3, [r7, #8]
			tempValue |= (GPIO_ConfigStruct->PuPd <<(position*2));
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	68da      	ldr	r2, [r3, #12]
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	fa02 f303 	lsl.w	r3, r2, r3
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	4313      	orrs	r3, r2
 8000536:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR = tempValue;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	60da      	str	r2, [r3, #12]

			if(GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d123      	bne.n	800058e <GPIO_Init+0x156>
			{
				tempValue = GPIOx->AFR[position >> 3U];
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	08da      	lsrs	r2, r3, #3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3208      	adds	r2, #8
 800054e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000552:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0xFU << ((position & 0x7U)*4));
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	f003 0307 	and.w	r3, r3, #7
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	220f      	movs	r2, #15
 800055e:	fa02 f303 	lsl.w	r3, r2, r3
 8000562:	43db      	mvns	r3, r3
 8000564:	68ba      	ldr	r2, [r7, #8]
 8000566:	4013      	ands	r3, r2
 8000568:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->AlernateFunction << ((position & 0x7U)*4));
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	695a      	ldr	r2, [r3, #20]
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	f003 0307 	and.w	r3, r3, #7
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	4313      	orrs	r3, r2
 800057e:	60bb      	str	r3, [r7, #8]
				GPIOx->AFR[position >> 3U] = tempValue;
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	08da      	lsrs	r2, r3, #3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3208      	adds	r2, #8
 8000588:	68b9      	ldr	r1, [r7, #8]
 800058a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(position = 0; position <16; position++)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	3301      	adds	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	2b0f      	cmp	r3, #15
 8000598:	f67f af5a 	bls.w	8000450 <GPIO_Init+0x18>
			}

		}

	}
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	371c      	adds	r7, #28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <GPIO_WritePin>:
 *
 *  @param  PinState = GPIO_Pin_Set or GPIO_Pin_Reset
 * @retreval None
 */
void GPIO_WritePin(GPIO_TypeDef_t *GPIOx, uint16_t Pin_Number, GPIO_PinState_t PinState)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	807b      	strh	r3, [r7, #2]
 80005b4:	4613      	mov	r3, r2
 80005b6:	707b      	strb	r3, [r7, #1]
	if(PinState == GPIO_Pin_Set)
 80005b8:	787b      	ldrb	r3, [r7, #1]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d103      	bne.n	80005c6 <GPIO_WritePin+0x1e>
	{
		GPIOx->BSSR = Pin_Number;
 80005be:	887a      	ldrh	r2, [r7, #2]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	619a      	str	r2, [r3, #24]
	}
	else
	{
		GPIOx->BSSR = (Pin_Number << 16U);
	}
}
 80005c4:	e003      	b.n	80005ce <GPIO_WritePin+0x26>
		GPIOx->BSSR = (Pin_Number << 16U);
 80005c6:	887b      	ldrh	r3, [r7, #2]
 80005c8:	041a      	lsls	r2, r3, #16
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	619a      	str	r2, [r3, #24]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <SPI_CloseISR_Tx>:
 * @oaram	SPI_Handle = User config structure
 *
 * @retreval None
 */
static void SPI_CloseISR_Tx(SPI_HandleTypeDef_t *SPI_Handle)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	SPI_Handle->Instance->SPI_CR2 &= ~(0x1U << SPI_CR2_TXEIE);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	685a      	ldr	r2, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80005ee:	605a      	str	r2, [r3, #4]
	SPI_Handle->TxDataSize = 0;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	851a      	strh	r2, [r3, #40]	@ 0x28
	SPI_Handle->pTxDataAddr = NULL;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	625a      	str	r2, [r3, #36]	@ 0x24
	SPI_Handle->busStateTx = SPI_BUS_FREE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <SPI_TransmitHelper_16Bits>:
 * @oaram	SPI_Handle = User config structure
 *
 * @retreval None
 */
static void SPI_TransmitHelper_16Bits( SPI_HandleTypeDef_t *SPI_Handle)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
	SPI_Handle->Instance->SPI_DR = *((uint16_t*)SPI_Handle->pTxDataAddr);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800061a:	881a      	ldrh	r2, [r3, #0]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	60da      	str	r2, [r3, #12]
	SPI_Handle->pTxDataAddr += sizeof(uint16_t);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000626:	1c9a      	adds	r2, r3, #2
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	625a      	str	r2, [r3, #36]	@ 0x24
	SPI_Handle->TxDataSize -= 2;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000630:	3b02      	subs	r3, #2
 8000632:	b29a      	uxth	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	851a      	strh	r2, [r3, #40]	@ 0x28
	if(SPI_Handle->TxDataSize == 0)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <SPI_TransmitHelper_16Bits+0x38>
	{
		SPI_CloseISR_Tx(SPI_Handle);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ffc9 	bl	80005d8 <SPI_CloseISR_Tx>
	}
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <SPI_TransmitHelper_8Bits>:
 * @oaram	SPI_Handle = User config structure
 *
 * @retreval None
 */
static void SPI_TransmitHelper_8Bits( SPI_HandleTypeDef_t *SPI_Handle)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
	SPI_Handle->Instance->SPI_DR = *((uint8_t*)SPI_Handle->pTxDataAddr);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	60da      	str	r2, [r3, #12]
	SPI_Handle->pTxDataAddr += sizeof(uint8_t);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	SPI_Handle->TxDataSize --;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000670:	3b01      	subs	r3, #1
 8000672:	b29a      	uxth	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	851a      	strh	r2, [r3, #40]	@ 0x28
	if(SPI_Handle->TxDataSize == 0)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <SPI_TransmitHelper_8Bits+0x38>
	{
		SPI_CloseISR_Tx(SPI_Handle);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ffa9 	bl	80005d8 <SPI_CloseISR_Tx>
	}
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <SPI_Init>:
 *
 * @retreval None
 */

void SPI_Init(SPI_HandleTypeDef_t *SPI_Handle)
{
 800068e:	b480      	push	{r7}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
	tempValue = SPI_Handle->Instance->SPI_CR1;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60fb      	str	r3, [r7, #12]

	tempValue |= (SPI_Handle->Init.Baudrate) | (SPI_Handle->Init.CPHA) | (SPI_Handle->Init.CPOL) | (SPI_Handle->Init.CRC_Length) | (SPI_Handle->Init.Mode) | \
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	691a      	ldr	r2, [r3, #16]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	431a      	orrs	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	431a      	orrs	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	431a      	orrs	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	431a      	orrs	r2, r3
			     (SPI_Handle->Init.BusConfig) | (SPI_Handle->Init.SSM_Cmd) | (SPI_Handle->Init.FrameFormat);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	69db      	ldr	r3, [r3, #28]
	tempValue |= (SPI_Handle->Init.Baudrate) | (SPI_Handle->Init.CPHA) | (SPI_Handle->Init.CPOL) | (SPI_Handle->Init.CRC_Length) | (SPI_Handle->Init.Mode) | \
 80006c2:	431a      	orrs	r2, r3
			     (SPI_Handle->Init.BusConfig) | (SPI_Handle->Init.SSM_Cmd) | (SPI_Handle->Init.FrameFormat);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	431a      	orrs	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6a1b      	ldr	r3, [r3, #32]
 80006ce:	4313      	orrs	r3, r2
	tempValue |= (SPI_Handle->Init.Baudrate) | (SPI_Handle->Init.CPHA) | (SPI_Handle->Init.CPOL) | (SPI_Handle->Init.CRC_Length) | (SPI_Handle->Init.Mode) | \
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]
	SPI_Handle->Instance->SPI_CR1 = tempValue;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	601a      	str	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <SPI_Periph_Cmd>:
 * @oaram	SPI_State = User selected enum ENABLE OR DISABLED
 *
 * @retreval None
 */
void SPI_Periph_Cmd(SPI_HandleTypeDef_t *SPI_Handle, FunctionalState_t SPI_State)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	70fb      	strb	r3, [r7, #3]
	if(ENABLE == SPI_State)
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d108      	bne.n	800070c <SPI_Periph_Cmd+0x24>
	{
		SPI_Handle->Instance->SPI_CR1 |=  (0x1U << SPI_CR1_SPE );
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000708:	601a      	str	r2, [r3, #0]
	}
	else
	{
		SPI_Handle->Instance->SPI_CR1 &= ~(0x1U << SPI_CR1_SPE );
	}
}
 800070a:	e007      	b.n	800071c <SPI_Periph_Cmd+0x34>
		SPI_Handle->Instance->SPI_CR1 &= ~(0x1U << SPI_CR1_SPE );
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800071a:	601a      	str	r2, [r3, #0]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
	...

08000728 <SPI_TransmitData_IT>:
 * @oaram	sizeOfData = Data Lenght in byte
 *
 * @retreval None
 */
void SPI_TransmitData_IT(SPI_HandleTypeDef_t *SPI_Handle, uint8_t *pData, uint16_t sizeOfData )
{
 8000728:	b480      	push	{r7}
 800072a:	b087      	sub	sp, #28
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	4613      	mov	r3, r2
 8000734:	80fb      	strh	r3, [r7, #6]
	SPI_BusStatus_t busState = SPI_Handle->busStateTx;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800073c:	75fb      	strb	r3, [r7, #23]

	if(busState != SPI_BUS_BUSY_TX)
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d01f      	beq.n	8000784 <SPI_TransmitData_IT+0x5c>
	{
		SPI_Handle->pTxDataAddr = (uint8_t*)pData;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	625a      	str	r2, [r3, #36]	@ 0x24
		SPI_Handle->TxDataSize = (uint16_t)sizeOfData;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	88fa      	ldrh	r2, [r7, #6]
 800074e:	851a      	strh	r2, [r3, #40]	@ 0x28
		SPI_Handle->busStateTx = SPI_BUS_BUSY_TX;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	2201      	movs	r2, #1
 8000754:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

		if(SPI_Handle->Instance->SPI_CR1 & (0x1U << SPI_CR1_CRCL))
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000762:	2b00      	cmp	r3, #0
 8000764:	d003      	beq.n	800076e <SPI_TransmitData_IT+0x46>
		{
			SPI_Handle->TxISRFunction = SPI_TransmitHelper_16Bits;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4a09      	ldr	r2, [pc, #36]	@ (8000790 <SPI_TransmitData_IT+0x68>)
 800076a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800076c:	e002      	b.n	8000774 <SPI_TransmitData_IT+0x4c>
		}
		else
		{
			SPI_Handle->TxISRFunction = SPI_TransmitHelper_8Bits;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <SPI_TransmitData_IT+0x6c>)
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
		}

		SPI_Handle->Instance->SPI_CR2 |= (0x1U << SPI_CR2_TXEIE);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000782:	605a      	str	r2, [r3, #4]

	}


}
 8000784:	bf00      	nop
 8000786:	371c      	adds	r7, #28
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	0800060f 	.word	0x0800060f
 8000794:	0800064f 	.word	0x0800064f

08000798 <SPI_InterrupHandler>:
 * @oaram	SPI_Handle = User config structure
 *
 * @retreval None
 */
void SPI_InterrupHandler(SPI_HandleTypeDef_t *SPI_Handle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	uint8_t interruptSource = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	73fb      	strb	r3, [r7, #15]
	uint8_t interruptFlag = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73bb      	strb	r3, [r7, #14]

	interruptSource = SPI_Handle->Instance->SPI_CR2 & (0x1U << SPI_CR2_TXEIE);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80007b4:	73fb      	strb	r3, [r7, #15]
	interruptFlag = SPI_Handle->Instance->SPI_SR & (0x1U << SPI_SR_TXE);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	73bb      	strb	r3, [r7, #14]

	if((interruptSource != 0)&& (interruptFlag !=0))
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d006      	beq.n	80007d8 <SPI_InterrupHandler+0x40>
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d003      	beq.n	80007d8 <SPI_InterrupHandler+0x40>
	{
		SPI_Handle->TxISRFunction(SPI_Handle);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	4798      	blx	r3
	}

	interruptSource = SPI_Handle->Instance->SPI_CR2 & (0x1U << SPI_CR2_RXNEIE);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e4:	73fb      	strb	r3, [r7, #15]
	interruptFlag = SPI_Handle->Instance->SPI_SR & (0x1U << SPI_SR_RXNE);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	73bb      	strb	r3, [r7, #14]

	if((interruptSource != 0)&& (interruptFlag !=0))
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d006      	beq.n	8000808 <SPI_InterrupHandler+0x70>
 80007fa:	7bbb      	ldrb	r3, [r7, #14]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d003      	beq.n	8000808 <SPI_InterrupHandler+0x70>
	{
		SPI_Handle->RxISRFunction(SPI_Handle);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	4798      	blx	r3
	}
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <EXTI0_IRQHandler>:
static void SPI_GPIO_Config();

SPI_HandleTypeDef_t SPI_Handle;

void EXTI0_IRQHandler()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x1)
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <EXTI0_IRQHandler+0x2c>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00b      	beq.n	8000838 <EXTI0_IRQHandler+0x28>
	{
		EXTI->PR |= (0x1U << 0U);
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <EXTI0_IRQHandler+0x2c>)
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	4a05      	ldr	r2, [pc, #20]	@ (800083c <EXTI0_IRQHandler+0x2c>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	6153      	str	r3, [r2, #20]
		GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_14, GPIO_Pin_Set);
 800082c:	2201      	movs	r2, #1
 800082e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000832:	4803      	ldr	r0, [pc, #12]	@ (8000840 <EXTI0_IRQHandler+0x30>)
 8000834:	f7ff feb8 	bl	80005a8 <GPIO_WritePin>
	}
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40013c00 	.word	0x40013c00
 8000840:	40020400 	.word	0x40020400

08000844 <SPI1_IRQHandler>:

void SPI1_IRQHandler()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	SPI_InterrupHandler(&SPI_Handle);
 8000848:	4802      	ldr	r0, [pc, #8]	@ (8000854 <SPI1_IRQHandler+0x10>)
 800084a:	f7ff ffa5 	bl	8000798 <SPI_InterrupHandler>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000001c 	.word	0x2000001c

08000858 <main>:

int main(void)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
	GPIO_LedConfig();
 800085e:	f000 f81b 	bl	8000898 <GPIO_LedConfig>
	GPIO_ButtonInterruptConfig();
 8000862:	f000 f869 	bl	8000938 <GPIO_ButtonInterruptConfig>
	SPI_GPIO_Config();
 8000866:	f000 f8d3 	bl	8000a10 <SPI_GPIO_Config>
	SPI_Config();
 800086a:	f000 f891 	bl	8000990 <SPI_Config>

	char msg[]= "Mehmet Demirbas";
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <main+0x38>)
 8000870:	463c      	mov	r4, r7
 8000872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for(;;)
	{
		SPI_TransmitData_IT(&SPI_Handle, (uint8_t*)msg, strlen(msg));
 8000878:	463b      	mov	r3, r7
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fcdc 	bl	8000238 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4802      	ldr	r0, [pc, #8]	@ (8000894 <main+0x3c>)
 800088a:	f7ff ff4d 	bl	8000728 <SPI_TransmitData_IT>
 800088e:	e7f3      	b.n	8000878 <main+0x20>
 8000890:	08000b38 	.word	0x08000b38
 8000894:	2000001c 	.word	0x2000001c

08000898 <GPIO_LedConfig>:

	}
}

static void GPIO_LedConfig()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
	RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <GPIO_LedConfig+0x94>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a21      	ldr	r2, [pc, #132]	@ (800092c <GPIO_LedConfig+0x94>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <GPIO_LedConfig+0x94>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]
	RCC_GPIOC_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <GPIO_LedConfig+0x94>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c0:	4a1a      	ldr	r2, [pc, #104]	@ (800092c <GPIO_LedConfig+0x94>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <GPIO_LedConfig+0x94>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]

	GPIO_InitTypeDef_t GPIO_LedStruct = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	615a      	str	r2, [r3, #20]
	GPIO_LedStruct.PinNumbers = GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_14;
 80008e2:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008e6:	603b      	str	r3, [r7, #0]
	GPIO_LedStruct.Mode = GPIO_MODE_OUTPUT;
 80008e8:	2301      	movs	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
	GPIO_LedStruct.Speed = GPIO_SPEED_HIGH;
 80008ec:	2302      	movs	r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
	GPIO_LedStruct.Otype = GPIO_OTYPE_PUSH_PULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
	GPIO_LedStruct.PuPd = GPIO_PUPD_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]

	GPIO_Init(GPIOB, &GPIO_LedStruct);	//Config
 80008f8:	463b      	mov	r3, r7
 80008fa:	4619      	mov	r1, r3
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <GPIO_LedConfig+0x98>)
 80008fe:	f7ff fd9b 	bl	8000438 <GPIO_Init>
	memset(&GPIO_LedStruct,0,sizeof(GPIO_LedStruct));
 8000902:	463b      	mov	r3, r7
 8000904:	2218      	movs	r2, #24
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f000 f8dc 	bl	8000ac6 <memset>


	GPIO_LedStruct.PinNumbers = 13;
 800090e:	230d      	movs	r3, #13
 8000910:	603b      	str	r3, [r7, #0]
	GPIO_LedStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
	GPIO_LedStruct.PuPd = GPIO_PUPD_PULL_DOWN;
 8000916:	2302      	movs	r3, #2
 8000918:	60fb      	str	r3, [r7, #12]

	GPIO_Init(GPIOC, &GPIO_LedStruct);
 800091a:	463b      	mov	r3, r7
 800091c:	4619      	mov	r1, r3
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <GPIO_LedConfig+0x9c>)
 8000920:	f7ff fd8a 	bl	8000438 <GPIO_Init>
}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020400 	.word	0x40020400
 8000934:	40020800 	.word	0x40020800

08000938 <GPIO_ButtonInterruptConfig>:
static void GPIO_ButtonInterruptConfig()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef_t EXTI_InitStruct = {0};
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
	RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <GPIO_ButtonInterruptConfig+0x54>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	4a10      	ldr	r2, [pc, #64]	@ (800098c <GPIO_ButtonInterruptConfig+0x54>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000950:	6453      	str	r3, [r2, #68]	@ 0x44
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <GPIO_ButtonInterruptConfig+0x54>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095a:	607b      	str	r3, [r7, #4]
	EXTI_LineConfig(EXTI_PortSource_GPIOC, EXTI_LineSource_0);
 800095c:	2100      	movs	r1, #0
 800095e:	2002      	movs	r0, #2
 8000960:	f7ff fd02 	bl	8000368 <EXTI_LineConfig>


	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000964:	2301      	movs	r3, #1
 8000966:	70fb      	strb	r3, [r7, #3]
	EXTI_InitStruct.Mode = EXTI_MODE_INTERRUPT;
 8000968:	2300      	movs	r3, #0
 800096a:	70bb      	strb	r3, [r7, #2]
	EXTI_InitStruct.TriggerSelection = EXTI_TRIGGER_RISING_EDGE;
 800096c:	2308      	movs	r3, #8
 800096e:	707b      	strb	r3, [r7, #1]
	EXTI_InitStruct.EXTI_LineNumber = EXTI_LineSource_0;
 8000970:	2300      	movs	r3, #0
 8000972:	703b      	strb	r3, [r7, #0]

	EXTI_Init(&EXTI_InitStruct);
 8000974:	463b      	mov	r3, r7
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fc66 	bl	8000248 <EXTI_Init>
	NVIC_EnableInterrupt(EXTI0_IRQNumber);
 800097c:	2006      	movs	r0, #6
 800097e:	f7ff fd29 	bl	80003d4 <NVIC_EnableInterrupt>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <SPI_Config>:



static void SPI_Config()
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	RCC_SPI1_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <SPI_Config+0x74>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a19      	ldr	r2, [pc, #100]	@ (8000a04 <SPI_Config+0x74>)
 80009a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <SPI_Config+0x74>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009ae:	607b      	str	r3, [r7, #4]


	SPI_Handle.Instance = SPI1;
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <SPI_Config+0x78>)
 80009b2:	4a16      	ldr	r2, [pc, #88]	@ (8000a0c <SPI_Config+0x7c>)
 80009b4:	601a      	str	r2, [r3, #0]
	SPI_Handle.Init.Baudrate = SPI_BAUDRATE_DIV8;
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <SPI_Config+0x78>)
 80009b8:	2210      	movs	r2, #16
 80009ba:	611a      	str	r2, [r3, #16]
	SPI_Handle.Init.BusConfig = SPI_BUS_FULLDUPLEX;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <SPI_Config+0x78>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
	SPI_Handle.Init.CPHA = SPI_CPHA_FIRST_EDGE;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <SPI_Config+0x78>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
	SPI_Handle.Init.CPOL = SPI_CPOL_LOW;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <SPI_Config+0x78>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
	SPI_Handle.Init.CRC_Length = SPI_CRC_LENGTH_8BIT;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <SPI_Config+0x78>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
	SPI_Handle.Init.FrameFormat = SPI_FRAME_FORMAT_MSB;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <SPI_Config+0x78>)
 80009d6:	2280      	movs	r2, #128	@ 0x80
 80009d8:	621a      	str	r2, [r3, #32]
	SPI_Handle.Init.Mode = SPI_MODE_MASTER;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <SPI_Config+0x78>)
 80009dc:	2204      	movs	r2, #4
 80009de:	605a      	str	r2, [r3, #4]
	SPI_Handle.Init.SSM_Cmd = SPI_SSM_ENABLED;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <SPI_Config+0x78>)
 80009e2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009e6:	615a      	str	r2, [r3, #20]

	SPI_Init(&SPI_Handle);
 80009e8:	4807      	ldr	r0, [pc, #28]	@ (8000a08 <SPI_Config+0x78>)
 80009ea:	f7ff fe50 	bl	800068e <SPI_Init>
	NVIC_EnableInterrupt(SPI1_IRQNumber);
 80009ee:	2023      	movs	r0, #35	@ 0x23
 80009f0:	f7ff fcf0 	bl	80003d4 <NVIC_EnableInterrupt>

	SPI_Periph_Cmd(&SPI_Handle, ENABLE);
 80009f4:	2101      	movs	r1, #1
 80009f6:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <SPI_Config+0x78>)
 80009f8:	f7ff fe76 	bl	80006e8 <SPI_Periph_Cmd>



}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	2000001c 	.word	0x2000001c
 8000a0c:	40013000 	.word	0x40013000

08000a10 <SPI_GPIO_Config>:
static void SPI_GPIO_Config()
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <SPI_GPIO_Config+0x5c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a13      	ldr	r2, [pc, #76]	@ (8000a6c <SPI_GPIO_Config+0x5c>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <SPI_GPIO_Config+0x5c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
	GPIO_InitTypeDef_t GPIO_InitStruct = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
 8000a3e:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.PinNumbers = GPIO_PIN_5 | GPIO_PIN_7;  //PA5= SCK PA7= MOSI
 8000a40:	23a0      	movs	r3, #160	@ 0xa0
 8000a42:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF;
 8000a44:	2302      	movs	r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PUSH_PULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000a50:	2302      	movs	r3, #2
 8000a52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.AlernateFunction = GPIO_AF_5;
 8000a54:	2305      	movs	r3, #5
 8000a56:	61bb      	str	r3, [r7, #24]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <SPI_GPIO_Config+0x60>)
 8000a5e:	f7ff fceb 	bl	8000438 <GPIO_Init>
}
 8000a62:	bf00      	nop
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000

08000a74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a74:	480d      	ldr	r0, [pc, #52]	@ (8000aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a78:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	@ (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000aa2:	f000 f819 	bl	8000ad8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000aa6:	f7ff fed7 	bl	8000858 <main>

08000aaa <LoopForever>:

LoopForever:
  b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   r0, =_estack
 8000aac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ab8:	08000b58 	.word	0x08000b58
  ldr r2, =_sbss
 8000abc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ac0:	20000058 	.word	0x20000058

08000ac4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>

08000ac6 <memset>:
 8000ac6:	4402      	add	r2, r0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d100      	bne.n	8000ad0 <memset+0xa>
 8000ace:	4770      	bx	lr
 8000ad0:	f803 1b01 	strb.w	r1, [r3], #1
 8000ad4:	e7f9      	b.n	8000aca <memset+0x4>
	...

08000ad8 <__libc_init_array>:
 8000ad8:	b570      	push	{r4, r5, r6, lr}
 8000ada:	4d0d      	ldr	r5, [pc, #52]	@ (8000b10 <__libc_init_array+0x38>)
 8000adc:	4c0d      	ldr	r4, [pc, #52]	@ (8000b14 <__libc_init_array+0x3c>)
 8000ade:	1b64      	subs	r4, r4, r5
 8000ae0:	10a4      	asrs	r4, r4, #2
 8000ae2:	2600      	movs	r6, #0
 8000ae4:	42a6      	cmp	r6, r4
 8000ae6:	d109      	bne.n	8000afc <__libc_init_array+0x24>
 8000ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8000b18 <__libc_init_array+0x40>)
 8000aea:	4c0c      	ldr	r4, [pc, #48]	@ (8000b1c <__libc_init_array+0x44>)
 8000aec:	f000 f818 	bl	8000b20 <_init>
 8000af0:	1b64      	subs	r4, r4, r5
 8000af2:	10a4      	asrs	r4, r4, #2
 8000af4:	2600      	movs	r6, #0
 8000af6:	42a6      	cmp	r6, r4
 8000af8:	d105      	bne.n	8000b06 <__libc_init_array+0x2e>
 8000afa:	bd70      	pop	{r4, r5, r6, pc}
 8000afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b00:	4798      	blx	r3
 8000b02:	3601      	adds	r6, #1
 8000b04:	e7ee      	b.n	8000ae4 <__libc_init_array+0xc>
 8000b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b0a:	4798      	blx	r3
 8000b0c:	3601      	adds	r6, #1
 8000b0e:	e7f2      	b.n	8000af6 <__libc_init_array+0x1e>
 8000b10:	08000b50 	.word	0x08000b50
 8000b14:	08000b50 	.word	0x08000b50
 8000b18:	08000b50 	.word	0x08000b50
 8000b1c:	08000b54 	.word	0x08000b54

08000b20 <_init>:
 8000b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b22:	bf00      	nop
 8000b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b26:	bc08      	pop	{r3}
 8000b28:	469e      	mov	lr, r3
 8000b2a:	4770      	bx	lr

08000b2c <_fini>:
 8000b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2e:	bf00      	nop
 8000b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b32:	bc08      	pop	{r3}
 8000b34:	469e      	mov	lr, r3
 8000b36:	4770      	bx	lr
